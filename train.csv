question,answer
단일 책임 원칙은 무엇인가요?,"클래스는 단 하나의 목적을 가져야 하며, 클래스를 변경하는 이유는 단 하나의 이유여야만 한다."
개방 폐쇠 원칙은 무엇인가요?,클래스는 확장에는 열려 있지만 변경에는 닫혀 있어야 한다.
리스코프 치환 원칙은 무엇인가요?,상위 타입의 객체를 하위 타입으로 바꾸어도 프로그램은 일관되게 동작해야 한다.
리스코프 교체 원칙은 무엇인가요?,상위 타입의 객체를 하위 타입으로 바꾸어도 프로그램은 일관되게 동작해야 한다.
인터페이스 분리 원칙은 무엇인가요?,클라이언트는 이용하지 않는 메소드에 의존하지 않도록 인터페이스를 분리해야 한다.
의존 역전 원칙은 무엇인가요? ,클라이언트는 인터페이스에 의존해야 하며 구현된 클래스에 의존해서는 안된다.
의존관계 역전 원칙은 무엇인가요?,클라이언트는 인터페이스에 의존해야 하며 구현된 클래스에 의존해서는 안된다.
절차 지향 프로그래밍의 특징은 무엇인가요?,순차적인 처리를 중요시하는 프로그래밍 기법이다.
절차 지향 프로그래밍의 특징은 무엇인가요?,컴퓨터의 처리구조와 유사해 실행 속도가 빠르다.
절차 지향 프로그래밍의 특징은 무엇인가요?,코드의 순서가 바뀌면 동일한 겨로가를 보장하기 어렵다.
객체 지향 프로그래밍의 특징은 무엇인가요?,현실 세계의 사물들을 객체로 모델링하여 개발을 진행하는 프로그래밍 기법이다.
객체 지향 프로그래밍의 특징은 무엇인가요?,하나의 메소드나 클래스가 다양한 방법으로 동작하는 다형성을 지원한다.
객체 지향 프로그래밍의 특징은 무엇인가요?,절차 지향 언어보다 실행 속도가 느리다.
객체 지향 프로그래밍의 특징은 무엇인가요?,"캡슐화, 상속, 다형성과 같은 기법을 이용할 수 있다."
RESTFUL API는 무엇인가요?,HTTP통신에서 어떠한 자원에 대한 CRUD 요청을 리소스와 메서드로 표현하여 특정한 형태로 전달하는 방식을 말한다.
RESTFUL API의 구성요소는 무엇인가요?,"리소스, 메서드, 요청 방식, 레퍼런스, 리소스의 형태"
메모리 구조의 구성요소는 어떤 것들이 있나요?,"코드 영역, 데이터 영역, 힙 영역, 스택 영역이 있다."
메모리 구조에서 코드 영역은 무엇인가요?,코드 영역은 실행할 프로그램의 코드가 저장되는 영역입니다.
메모리 구조에서 데이터 영역은 무엇인가요?,프로그램의 전역 변수와 정적 변수가 저장되는 영역입니다. 프로그램의 시작과 함께 할당되며 프로그램이 종료되면 소멸합니다.
메모리 구조에서 힙 영역은 무엇인가요?,프로그래머가 직접 관리할 수 있는 메모리 영역으로 이 공간에 메모리를 할당하는 것을 동적 할당이라고 합니다. 힙 영역은 스택 영역과 달리 낮은 주소에서 높은 주소로 메모리가 할당됩니다.
메모리 구조에서 스택 영역은 무엇인가요?,함수의 호출과 함께 할당되며 지역 변수와 매개 변수가 저장되는 영역입니다. 스택 영역은 함수의 호출이 완료되면 소멸합니다.
동기 방식의 특징은 무엇인가요?,요청을 보내고 실행이 끝나면 다음 동작을 처리하는 방식이다.
동기 방식의 특징은 무엇인가요?,순서에 맞추어 진행되기 때문에 제어하기 쉽다.
동기 방식의 특징은 무엇인가요?,여러가지 요청을 동시에 처리할 수 없어 효율이 떨어진다.
비동기 방식의 특징은 무엇인가요?,요청을 보내고 해당 동작의  처리 여부와 상관없이 다음 요청이 동작하는 방식이다.
비동기 방식의 특징은 무엇인가요?,작업이 완료되는 시간을 기다릴 필요가 없기 때문에 자원을 효율적으로 사용할 수 있다.
비동기 방식의 특징은 무엇인가요?,작업이 완료된 결과를 제어하기 어렵다.
CALL BY VALUE의 특징은 무엇인가요?,인자로 받은 값을 복사하여 처리하는 방식이다.
CALL BY VALUE의 특징은 무엇인가요?,CALL BY VALUE에 의해 넘어온 값을 증가시켜도 원래의 값이 보존된다.
CALL BY VALUE의 특징은 무엇인가요?,값을 복사하여 넘기기 때문에 메모리 사용량이 늘어난다.
CALL BY REFERENCE의 특징은 무엇인가요?,인자로 받은 값의 주소를 참조하여 직접 값에 영향을 주는 방식이다.
CALL BY REFERENCE의 특징은 무엇인가요?,값을 복사하지 않고 직접 참조하기 때문에 속도가 빠르다.
CALL BY REFERENCE의 특징은 무엇인가요?,직접 값에 영향을 주기 때문에 리스크가 있다.
프레임워크는 무엇인가요?,프레임워크는 소프트웨어의 구체적인 부분에 해당하는 설계와 구현을 재사용이 가능하게끔 상호 협력하는 클래스와 인터페이스의 집합이다.
라이브러리는 무엇인가요?,라이브러리는 개발에 필요한 재사용이 가능한 기능들을 미리 구현해두고 필요한 곳에서 호출하여 사용 가능하도록 만들어진 집합이다.
SQL INJECTION은 무엇인가요?,공격자가 악의적인 의도를 갖는 구문을 삽입하여 공격자가 원하는 SQL을 실행시키도록 하는 웹 해킹기법이다.
SQL INJECTION을 방지하기 위한 방법은 무엇인가요?,특수문자 및 SQL 예약어들을 필더링하거나 SQL 오류 메시지를 노출하지 않는 등의 방법을 사용해야 한다.
MESSAGE QUEUE는 무엇인가요?,QUEUE 자료구조를 이용하여 데이터를 관리하는 시스템이다. 비동기 통신 프로토콜을 제공하여 메시지를 빠르게 주고 받을 수 있게 한다.
TEST DRIVEN DEVELOPMENT란 무엇인가요?,TEST DRIVEN DEVELOPMENT는 매우 짧은 개발 사이클의 반복에 의존하는 개발 프로세스로 개발자는 우선 요구되는 기능에 대한 테스트 케이스를 작성하고 그에 맞는 코드를 작성하여 테스트를 통과한 후에 상황에 맞게 리팩토링하는 테스트 주도 개발 방식이다.
TDD란 무엇인가요?,TDD는 매우 짧은 개발 사이클의 반복에 의존하는 개발 프로세스로 개발자는 우선 요구되는 기능에 대한 테스트 케이스를 작성하고 그에 맞는 코드를 작성하여 테스트를 통과한 후에 상황에 맞게 리팩토링하는 테스트 주도 개발 방식이다.
DOMAIN DRIVEN DESIGN은 무엇인가요?,DOMAIN DRIVEN DESIGN은 실세계에서 사건이 발생하는 집합인 DOMAIN을 중심으로 설계하는 방법이다.
DDD는 무엇인가요?,DDD는 실세계에서 사건이 발생하는 집합인 DOMAIN을 중심으로 설계하는 방법이다.
MICROSERVICE ARCHITECTURE는 무엇인가요?,MICROSERVICE ARCHITECTURE는 모든 시스템의 구성요소가 한 프로젝트에 통합되어 있으며 1개의 시스템을 독립적으로 배포가능한 각각의 서비스로 분할하고 각각의 서비스는 API를 통해 데이터를 주고받으며 1개의 큰 서비스를 구성한다.
MSA는 무엇인가요?,MSA는 모든 시스템의 구성요소가 한 프로젝트에 통합되어 있으며 1개의 시스템을 독립적으로 배포가능한 각각의 서비스로 분할하고 각각의 서비스는 API를 통해 데이터를 주고받으며 1개의 큰 서비스를 구성한다.
MSA의 장점은 무엇인가요?,일부 서비스에 장애가 발생하여도 전체 서비스에 장애가 발생하지 않는다.
MSA의 장점은 무엇인가요?,각각의 서비스들은 서로 다른 언어와 프레임워크로 구성될 수 있다.
MSA의 장점은 무엇인가요?,서비스의 확장이 용이하다.
MSA의 단점은 무엇인가요?,서비스가 분리되어 있어 테스팅이나 트랜잭션 처리 등이 어렵다.
MSA의 단점은 무엇인가요?,서비스 간에 API로 통신하기 때문에 그에 대한 비용이 발생한다.
MSA의 단점은 무엇인가요?,서비스 간의 호출이 연속적이기 때문에 디버깅 및 에러 트레이싱이 어렵다.
